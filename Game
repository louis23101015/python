import random


# 보드 출력
def print_board(board):
    for i in range(0, 9, 3):
        print(" | ".join(board[i:i + 3]))
    print()


# 승자 확인
def check_winner(board):
    wins = [(0, 1, 2), (3, 4, 5), (6, 7, 8),
            (0, 3, 6), (1, 4, 7), (2, 5, 8),
            (0, 4, 8), (2, 4, 6)]
    for a, b, c in wins:
        if board[a] != " " and board[a] == board[b] == board[c]:
            return board[a]
    return None


# 빈칸 목록
def empty_cells(board):
    return [i for i in range(9) if board[i] == " "]


# ---------- Strategy 1 『Random Position』 ----------
def ai_random(board):
    return random.choice(empty_cells(board))


# ---------- Strategy 2 『Position based on rules』 ----------
def ai_rule(board, me, opp):
    for mv in empty_cells(board):
        board[mv] = me
        if check_winner(board) == me:
            board[mv] = " "
            return mv
        board[mv] = " "

    for mv in empty_cells(board):
        board[mv] = opp
        if check_winner(board) == opp:
            board[mv] = " "
            return mv
        board[mv] = " "

    if 4 in empty_cells((board)): return 4
    for mv in [0,2,6,8]:
        if mv in empty_cells(board): return mv
    return random.choice(empty_cells(board))


# ---------- Strategy 3 『Maximum to Win, Minimum to Lose』  ----------
def minimax(board, me, opp, turn):
    winner = check_winner(board)
    if winner == me: return (1, None)
    if winner == opp: return (-1, None)
    if not empty_cells(board): return (0, None)

    if turn == me:
        best = -2; move = None
        for mv in empty_cells(board):
            board[mv] = me
            val,_ = minimax(board, me, opp, opp)
            board[mv] = " "
            if val > best:
                best, move = val, mv
        return (best, move)

    else:
        best = 2; move = None
        for mv in empty_cells(board):
            board[mv] = opp
            val,_ =  minimax(board, me, opp, me)
            board[mv] = " "
            if val < best:
                best, move = val, mv
        return (best, move)


def ai_minimax(board, me, opp):
    _, mv = minimax(board, me, opp, me)
    return mv


# ---------- 게임 ----------
def play():
    board = [" "] * 9
    human = input("당신의 말 (X/O): ").upper()
    ai = "O" if human == "X" else "X"

    print("AI 전략: 1) RANDOM  2) RULE  3) MINIMAX")
    choice = input("선택: ").strip()

    print_board([str(i + 1) for i in range(9)])  # 자리 번호 안내
    turn = "X"

    while True:
        if turn == human:
            mv = int(input("당신의 수(1~9): ")) - 1
        else:
            if choice == "1":
                mv = ai_random(board)
            elif choice == "2":
                mv = ai_rule(board, ai, human)
            else:
                mv = ai_minimax(board, ai, human)
            print(f"AI({ai})가 {mv + 1} 번 칸에 둡니다.")
        if board[mv] ==  ' ':
            board[mv] = turn
        else:
            print("빈 자리를 선택해 주세요.")
            print_board(board)
            continue
        board[mv] = turn
        print_board(board)

        if check_winner(board):
            print(f"{turn} 승리!")
            break
        if not empty_cells(board):
            print("무승부.")
            break
        turn = ai if turn == human else human


while 1:
    main = input("start 입력:")
    if main == "start":
        print("\n")
        play()
    else:
        break
